//------------------
// Устные задачи
// Задача 1
// М - монета
// ТМ – тяжелая монета
// При первом взвешивании сравниваем по три М, две М оставляем в стороне.
//   Выясняем что ТМ на одной из сторон  весов, либо ТМ среди двух оставшихся.
//   Если ТМ на одной из сторон  весов, то сравниваем по одной М, одну М оставляем в стороне.
//   Если ТМ среди двух оставшихся, то сравниваем их.
//
//------------------
// Задача 2
// Если честно, то эту задачу сам не понял, как решать, нашел решение на stackoverflow.com, но с ходу его не понял.
//
//------------------
// Задача 3
// П - предмет
// Здесь я предлагаю первым П определять диапазон, а вторым П определять точную высоту.
//   Для того чтоб первый П и второй П имели равное количество экспериментов, нужно высчитать квадрат из общего числа
// Квадрат из 5000 – это примерно 71.
// Но тут нужно учитывать, что если П определит, что уничтожение П происходит в последнем диапазоне, то для второго П останется диапазон в 30 шагов и если разрушение произойдет на последнем шаге, то будет 71 + 30 = 101 эксперимент.
//   Но если уничтожение П произойдет в предпоследнем диапазоне и на последнем его шаге, то получим 70 + 71 = 141 эксперимент.
//
//------------------
// Задача 4
// х – общее число пирожков
// х/3+2 – купит первый студент
// х/4+3 – купит второй студент
// х/5+8 – купит третий студент
// х/3 + 2 + х/4 + 3 + х/5 + 8 = х
// Далее просто решаем формулу.
//   Решили формулу с сыном и получили 60 пирожков. :)


//-----------------------------------------------------------------------------------------

// Задача 1

//  Если число оканчивается на 1, то возвращаем "компьютер" (кроме 11).
//  Если число оканчивается на 2, 3 или 4, то возвращаем "компьютера" (кроме 12, 13, 14).
//  При 11, 12, 13, 14 и во всех остальных случаях возвращаем "компьютеров".
//
// const getQuantityComputers = (quantity) => {
//   // получаем два последних числа от количества компьютеров
//   let lastTwoDigits = quantity > 99 ? quantity % 100 : quantity;
//
//   // получаем последнее число от количества компьютеров
//   let lastDigit = quantity > 9 ? quantity % 10 : quantity;
//
//   // проверяем число на равенство в диапазоне от 11 до 14
//   if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
//     return `${quantity} компьютеров`;
//
//     // иначе, проверяем число на равенство 1
//   } else if (lastDigit === 1) {
//     return `${quantity} компьютер`;
//
//     // иначе, проверяем число на равенство в диапазоне от 2 до 4
//   } else if (lastDigit >= 2 && lastDigit <= 4) {
//     return `${quantity} компьютера`;
//
//     // иначе, если не выполнилось ни одна из проверок
//   } else {
//     return `${quantity} компьютеров`;
//   }
// };
//
// // Пример оспользования
// const quantityComputers = getQuantityComputers(102);
// console.log(quantityComputers);


//-----------------------------------------------------------------------------------------

// Задача 2

// функция, для получения массива всех делителй чисал (кроме 1)
// const getArrayDivisors = (num) => {
//   // создаем массив для хранения делителей
//   const divisors = [];
//
//   // цикл, для наполнения массива делителей
//   for (let i = 2; i <= num; i++) {
//     // добавление в массив делителей, при условии прохождения проверки на целое число
//     if (num % i === 0) divisors.push(i);
//   }
//
//   // возвращаем массив делителей
//   return divisors;
// };
//
// // функция, для получения массива общих делителей
// function findCommonDivisors(arr) {
//   // получеем массив делителй, первого числа и записываем его как массив общих делителей
//   let commonDivisors = getArrayDivisors(arr[0]);
//
//   // цикл, для поиска общих делителей
//   for (let i = 1; i < arr.length; i++) {
//     // получеем текущий массив делителй
//     const currentArrayDivisors = getArrayDivisors(arr[i]);
//
//     // фильтруем массив всех делителй, но основе текущего массива делителей
//     commonDivisors = commonDivisors.filter((divisor) => currentArrayDivisors.includes(divisor));
//   }
//
//   // возвращаем массив общих делителей
//   return commonDivisors;
// }
//
// // Пример использования
// const commonDivisors = findCommonDivisors([42, 12, 18]);
// console.log(commonDivisors);


//-----------------------------------------------------------------------------------------

// Задача 3

// "простое" - это число которое делится на 1 и на само себя
//
// функция для проверки числа на "простое"
// const isPrime = (num) => {
//   // если число меньше одного значит оно не "простое"
//   if (num <= 1) return false;
//
//   // если число 2 или 3, значит оно "простое"
//   if (num <= 3) return true;
//
//   // если число больше 3, и оно делится на 2 или 3, значит оно не "простое"
//   if (num % 2 === 0 || num % 3 === 0) return false;
//
//   // массив для накопления результатов работы цикла проверки всех делителей числа
//   const array = [];
//
//   // цикл проверки количества делителей числа
//   for (let i = 1; i <= num; i++) {
//     // если в массиве больше двух значений, значит число не "простое"
//     if (array.length > 2) return false;
//
//     // если число делится на переменную i без остатка, то добавляем true в массив
//     if (num % i === 0) array.push(true);
//   }
//
//   // во всех остальных случаях чило "простое"
//   return true;
// };
//
// функция для проверки диапазона чисел на "простые" и наполнение массива isPrime
// const findPrimeNumbers = (minNum, maxNum) => {
//   // массив для хранения "простых" чисел
//   const array = [];
//
//   // цикл для проверки диапазона чисел на "простое", с помощью функции
//   for (let i = minNum; i <= maxNum; i++) {
//     // если число проходит проверку, то оно попадает в массив "простых" чисел
//     if (isPrime(i)) array.push(i);
//   }
//
//   // возвращем итоговый массив "простых" чисел
//   return array;
// };
//
// Пример оспользования
// const arrayPrimeNumbers = findPrimeNumbers(11, 20);
// console.log(arrayPrimeNumbers);


//-----------------------------------------------------------------------------------------

// Задача 4

// данные отображются ровно до числа 9 (для одно и двузначных чисел)
// чтоб выводить более крупную таблицу нужны дополнительные проверки (все из-за пробелов)
// а так, это все конечно версткой делается
//
// function createMultiTable(num) {
//
//   // цикл, который  для формирования количества строк
//   for (let i = 0; i <= num; i++) {
//
//     // создаем строку, ктоорая в итоге выведется в консоль
//     let string = `${i}`;
//
//     // цикл, ядл дополнения строки результатми умножений
//     for (let j = 1; j <= num; j++) {
//
//       // условие, для допоолнения значениями первой строки
//       if (i === 0) {
//         if (j > 9) {
//           string += ` ${j}`;
//           continue;
//         }
//         string += `  ${j}`;
//         continue;
//       }
//
//       // условие для допоолнения значениями последующих строк
//       if (j * i > 9) {
//         string += ` ${j * i}`;
//         continue;
//       }
//       string += `  ${j * i}`;
//     }
//
//     // итоговый вывод строки в консоль
//     console.log(string);
//   }
// }
//
// // Пример оспользования
// createMultiTable(5);


